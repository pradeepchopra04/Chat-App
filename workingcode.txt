import express from "express";
import { connectDB } from "./utils/features.js";
import dotenv from "dotenv";
import { errorMiddleware } from "./middlewares/error.js";
import cookieParser from "cookie-parser";
import { Server } from "socket.io";
import { createServer } from "http";
import cors from "cors";
import { v2 as cloudinary } from "cloudinary";
import {
  CHAT_JOINED,
  CHAT_LEAVED,
  NEW_MESSAGE,
  NEW_MESSAGE_ALERT,
  ONLINE_USERS,
  START_TYPING,
  STOP_TYPING,
} from "./constants/events.js";
import { getSockets } from "./lib/helper.js";
import { Message } from "./models/message.js";
import { socketAuthenticator } from "./middlewares/auth.js";

import userRoute from "./routes/user.js";
import chatRoute from "./routes/chat.js";
import { User } from "./models/user.js";

dotenv.config({
  path: "./.env",
});

const mongoURI = process.env.MONGO_URI;
const port = process.env.PORT || 3000;
const envMode = process.env.NODE_ENV.trim() || "PRODUCTION";
const userSocketIDs = new Map();
const onlineUsers = new Set();

connectDB(mongoURI);

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// CORS option for flutterflow Application.......

const customCorsOptions = {
  origin: "*",
  methods: ["GET", "POST", "PUT", "DELETE"],
};

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
      origin: "*",
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
  }
});

app.set("io", io);

// Using Middlewares Here
app.use(express.json({limit : "15mb"}));
app.use(express.urlencoded({ extended: true ,limit: '1mb' }));
app.use(cookieParser());
app.use(cors(customCorsOptions));

app.use("/api/v1/user", userRoute);
app.use("/api/v1/chat", chatRoute);

app.get("/", (req, res) => {
  res.send("Api is Working!");
});

// io.use(socketAuthenticator);

io.on("connection", async(socket) => {

	const userId = socket.handshake.query.userId;
  console.log("userId: ", userId);
  console.log("socketId: ", socket.id);


  const user = await User.findById(userId);

  // const user = socket.user;

  if (!user) {
    console.log("Unauthorized connection attempt");
    socket.disconnect(true);
    return;
  }
  userSocketIDs.set(user._id.toString(), socket.id);

  console.log("A user connected", user.fullName, socket.id);


  // socket.on(NEW_MESSAGE, async ({ chatId, members, message }) => {

  //   const messageForDB = {
  //     content: message,
  //     sender: user._id,
  //     chat: chatId,
  //   };
    
  //   try {
  //     const messageData = await Message.create(messageForDB);

  //     const messageForRealTime = {
  //       content: message,
  //       _id: messageData._id,
  //       sender: {
  //         _id: user._id,
  //         fullName: user.fullName,
  //         avatar: user.avatar
  //       },
  //       chat: chatId,
  //       createdAt: new Date().toISOString(),
  //     };

  //     const membersIncludingMe = [...members, user._id];

  //     // const membersSocket = getSockets(members);
  //     const membersSocket = getSockets(membersIncludingMe);

  //     io.to(membersSocket).emit(NEW_MESSAGE, {
  //       chatId,
  //       message: messageForRealTime,
  //     });
  //     io.to(membersSocket).emit(NEW_MESSAGE_ALERT, { chatId });


  //   } catch (error) {
  //     throw new Error(error);
  //   }
  // });

  socket.on("message",(msg) =>{
    console.log("Flutter Message",msg);
  })

  socket.on(START_TYPING, ({ members, chatId }) => {
    console.log("someone is typing in : " + chatId);
    const membersSockets = getSockets(members);
    socket.to(membersSockets).emit(START_TYPING, { chatId, user });
  });

  socket.on(STOP_TYPING, ({ members, chatId }) => {
    console.log("someone has stopped typing in : " + chatId);
    const membersSockets = getSockets(members);
    socket.to(membersSockets).emit(STOP_TYPING, { chatId, user });
  });

  socket.on(CHAT_JOINED, (userId, members) => {
    onlineUsers.add(userId?.toString());
    console.log("User is online", user);
    const membersSocket = getSockets(members);
    io.to(membersSocket).emit(ONLINE_USERS, Array.from(onlineUsers));
  });

  socket.on(CHAT_LEAVED, ({ userId, members }) => {
    onlineUsers.delete(userId?.toString());

    const membersSocket = getSockets(members);
    io.to(membersSocket).emit(ONLINE_USERS, Array.from(onlineUsers));
  });

  socket.on("disconnect", () => {
    console.log("A user disconnected", user.fullName, socket.id);
    userSocketIDs.delete(user?._id.toString());
    onlineUsers.delete(user?._id.toString());
    socket.broadcast.emit(ONLINE_USERS, Array.from(onlineUsers));
  });
});


app.use(errorMiddleware);

server.listen(port, () => {
  console.log(`Server is running on port ${port} in ${envMode} Mode`);
});

export { envMode, userSocketIDs, io };



........................................................................................................



#Flutter socket connection code.......


// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import 'package:socket_io_client/socket_io_client.dart' as IO;

// Replace with your server URL
const String SOCKET_SERVER_URL = 'https://recloud-0gw9.onrender.com';

// Define a global socket variable
IO.Socket? socket;

void initializeSocket(String userId) {
  if (socket == null) {
    socket = IO.io(
        SOCKET_SERVER_URL,
        IO.OptionBuilder()
            .setTransports(['websocket']) // for Flutter or Dart VM
            .disableAutoConnect()
            .setQuery({'userId': userId}) // disable auto-connection
            .build());

    socket?.connect();

    socket?.on('connect', (_) {
      print('connected to socket server');
      socket?.emit(
          'message', "Socket Connected with flutter using Custom Action");
    });

    socket?.on('disconnect', (_) {
      print('disconnected from socket server');
    });
  }
}

// Define the custom action function
Future<void> initializeSocketAction(String userId) async {
  initializeSocket(userId);
}




#Flutter test emit code..


// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import './initialize_socket_action.dart';

import 'package:socket_io_client/socket_io_client.dart' as IO;

Future<void> sendTestMessage(String chatId, String token) async {
  if (socket != null) {
    socket?.emit('testMessage', {
      'chatId': chatId,
      'token': token,
    });
    print("Test Message sent");
    print('Message sent: $chatId');
  } else {
    print('Socket not initialized.');
  }
}











.....................................................................................................


// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import 'package:socket_io_client/socket_io_client.dart' as IO;

// Replace with your server URL
const String SOCKET_SERVER_URL = 'https://recloud-0gw9.onrender.com';

// Define a global socket variable
IO.Socket? socket;

void initializeSocket(String userId) {
  if (socket == null) {
    socket = IO.io(
        SOCKET_SERVER_URL,
        IO.OptionBuilder()
            .setTransports(['websocket']) // for Flutter or Dart VM
            .disableAutoConnect()
            .setQuery({'userId': userId}) // disable auto-connection
            .build());

    socket?.connect();

    socket?.on('connect', (_) {
      print('connected to socket server');
      socket?.emit(
          'message', "Socket Connected with flutter using Custom Action");
    });

    socket?.on('disconnect', (_) {
      print('disconnected from socket server');
    });
  }
}

// Define the custom action function
Future<void> initializeSocketAction(String userId) async {
  initializeSocket(userId);
}











.....................................................................................................

23 july 2024







// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import "./initialize_socket_action.dart";
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'dart:io';

Future<void> newMessageEventListener(String chatId, String userId) async {
  IO.Socket? socket = FFAppState().socketGlobal;
  if (socket == null || socket!.id == null || socket!.id!.isEmpty) {
    print("Socket or ID is null, reconnecting...");
    await initializeSocketAction(userId);
  }

  if (socket != null && socket!.id != null && socket!.id!.isNotEmpty) {
    print("Listening for new messages in socketId: ${socket!.id}");

    // Remove existing listener for 'NEW_MESSAGE' to avoid duplicates
    socket?.off('NEW_MESSAGE');
    print('after off');
    // Emit the testMessage event
    socket?.emit("testMessage", "Test Message From Flutter App");

    socket?.on('NEW_MESSAGE', (data) {
      // Debug print to verify data received
      print("Received data: $data");

      if (data['chatId'] == chatId) {
        FFAppState().update(() {
          FFAppState()
              .currentSelectedChatAllMessages
              .insert(0, data['message']);
        });
        print("Message updated in app state: ${data['message']}");
      }
    });

    print("Listening for new messages in Chat: $chatId");
  } else {
    print('Socket not initialized.');
  }
}










// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'dart:async';

const String SOCKET_SERVER_URL = 'https://recloud-0gw9.onrender.com';

IO.Socket? socket;

void initializeSocket(String userId) {
  if (socket == null) {
    socket = IO.io(
        SOCKET_SERVER_URL,
        IO.OptionBuilder()
            .setTransports(['websocket'])
            .disableAutoConnect()
            .setQuery({'userId': userId})
            .enableReconnection() // Enable automatic reconnection
            .setReconnectionAttempts(
                10) // Maximum number of reconnection attempts
            .setReconnectionDelay(
                5000) // Delay between reconnection attempts (in milliseconds)
            .build());
    FFAppState().socketGlobal = socket;
    socket?.connect();

    socket?.on('connect', (_) {
      print('Connected to socket server');
      socket?.emit(
          'message', "Socket Connected with flutter using Custom Action");
    });

    socket?.on('disconnect', (_) {
      print('Disconnected from socket server');
    });

    // Implement ping-pong mechanism
    socket?.on('pong', (_) {
      print('Received pong from server');
    });

    void sendPing() {
      socket?.emit('ping');
    }

    // Send ping every 25 seconds
    Timer.periodic(Duration(seconds: 25), (timer) {
      if (socket != null && socket!.connected) {
        sendPing();
      } else {
        timer.cancel();
      }
    });
  }
}

Future<void> initializeSocketAction(String userId) async {
  initializeSocket(userId);
}